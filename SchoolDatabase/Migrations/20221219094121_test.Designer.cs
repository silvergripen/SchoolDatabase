// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolDatabase.Data;

#nullable disable

namespace SchoolDatabase.Migrations
{
    [DbContext(typeof(TestContext))]
    [Migration("20221219094121_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SchoolDatabase.Models.Adress", b =>
                {
                    b.Property<int>("Adressid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Adressid"), 1L, 1);

                    b.Property<string>("Adress1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Adress");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Adressid");

                    b.ToTable("Adress", (string)null);
                });

            modelBuilder.Entity("SchoolDatabase.Models.Class", b =>
                {
                    b.Property<int>("Classid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Classid"), 1L, 1);

                    b.Property<DateTime?>("Classdate")
                        .HasColumnType("datetime");

                    b.Property<int>("Subjectid")
                        .HasColumnType("int");

                    b.HasKey("Classid");

                    b.HasIndex("Subjectid");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"), 1L, 1);

                    b.Property<DateTime?>("Dateset")
                        .HasColumnType("date");

                    b.Property<string>("Grade1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Grade")
                        .IsFixedLength();

                    b.Property<int?>("Studentid")
                        .HasColumnType("int");

                    b.Property<int?>("Subjectid")
                        .HasColumnType("int");

                    b.HasKey("GradeId");

                    b.HasIndex("Studentid");

                    b.HasIndex("Subjectid");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("SchoolDatabase.Models.Personel", b =>
                {
                    b.Property<int>("Jobid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Jobid"), 1L, 1);

                    b.Property<int?>("Adressid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Bday")
                        .HasColumnType("date");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Jobid");

                    b.HasIndex("Adressid");

                    b.HasIndex("WorkId");

                    b.ToTable("Personel", (string)null);
                });

            modelBuilder.Entity("SchoolDatabase.Models.PersonelClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Classid")
                        .HasColumnType("int");

                    b.Property<int?>("Personelid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Classid");

                    b.ToTable("PersonelClasses");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<int?>("Adressid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Bday")
                        .HasColumnType("date");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Klassid")
                        .HasColumnType("int");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentId");

                    b.HasIndex("Adressid");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SchoolDatabase.Models.StudentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClass", (string)null);
                });

            modelBuilder.Entity("SchoolDatabase.Models.StudentSubject", b =>
                {
                    b.Property<int>("StudentSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentSubjectId"), 1L, 1);

                    b.Property<int?>("Studentid")
                        .HasColumnType("int")
                        .HasColumnName("studentid");

                    b.Property<int?>("Subjectid")
                        .HasColumnType("int");

                    b.HasKey("StudentSubjectId");

                    b.HasIndex("Studentid");

                    b.HasIndex("Subjectid");

                    b.ToTable("StudentSubject", (string)null);
                });

            modelBuilder.Entity("SchoolDatabase.Models.Subject", b =>
                {
                    b.Property<int>("Subjectid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Subjectid"), 1L, 1);

                    b.Property<int?>("Classid")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Subject_name");

                    b.HasKey("Subjectid");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Work", b =>
                {
                    b.Property<int>("Workid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Workid"), 1L, 1);

                    b.Property<string>("Work1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Work");

                    b.HasKey("Workid");

                    b.ToTable("Work", (string)null);
                });

            modelBuilder.Entity("SchoolDatabase.Models.Class", b =>
                {
                    b.HasOne("SchoolDatabase.Models.Subject", "Subject")
                        .WithMany("Classes")
                        .HasForeignKey("Subjectid")
                        .IsRequired()
                        .HasConstraintName("FK_Classes_Subject");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Grade", b =>
                {
                    b.HasOne("SchoolDatabase.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_Grade_Student");

                    b.HasOne("SchoolDatabase.Models.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("Subjectid")
                        .HasConstraintName("FK_Grade_Subject1");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Personel", b =>
                {
                    b.HasOne("SchoolDatabase.Models.Adress", "Adress")
                        .WithMany("Personels")
                        .HasForeignKey("Adressid")
                        .HasConstraintName("FK_Personel_Adress");

                    b.HasOne("SchoolDatabase.Models.Work", "Work")
                        .WithMany("Personels")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("FK_Personel_Work");

                    b.Navigation("Adress");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("SchoolDatabase.Models.PersonelClass", b =>
                {
                    b.HasOne("SchoolDatabase.Models.Class", "Class")
                        .WithMany("PersonelClasses")
                        .HasForeignKey("Classid")
                        .HasConstraintName("FK_PersonelClasses_Classes");

                    b.HasOne("SchoolDatabase.Models.Personel", "IdNavigation")
                        .WithOne("PersonelClass")
                        .HasForeignKey("SchoolDatabase.Models.PersonelClass", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_PersonelClasses_Personel");

                    b.Navigation("Class");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Student", b =>
                {
                    b.HasOne("SchoolDatabase.Models.Adress", "Adress")
                        .WithMany("Students")
                        .HasForeignKey("Adressid")
                        .HasConstraintName("FK_Student_Adress1");

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("SchoolDatabase.Models.StudentClass", b =>
                {
                    b.HasOne("SchoolDatabase.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_StudentClass_Classes");

                    b.HasOne("SchoolDatabase.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentClass_Student");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolDatabase.Models.StudentSubject", b =>
                {
                    b.HasOne("SchoolDatabase.Models.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("Studentid")
                        .HasConstraintName("FK_StudentSubject_Student");

                    b.HasOne("SchoolDatabase.Models.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("Subjectid")
                        .HasConstraintName("FK_StudentSubject_Subjects");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Adress", b =>
                {
                    b.Navigation("Personels");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Class", b =>
                {
                    b.Navigation("PersonelClasses");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Personel", b =>
                {
                    b.Navigation("PersonelClass");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Subject", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Grades");

                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("SchoolDatabase.Models.Work", b =>
                {
                    b.Navigation("Personels");
                });
#pragma warning restore 612, 618
        }
    }
}
